<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Social Media Analyzer</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-4xl font-bold text-center mb-8 text-blue-600">Social Media Analyzer</h1>
        
        <!-- Analysis Configuration Section -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h2 class="text-2xl font-semibold mb-4">Analysis Configuration</h2>
            
            <!-- Topic Input -->
            <div class="mb-4">
                <label for="topicInput" class="block text-sm font-medium text-gray-700 mb-2">Topic/Query</label>
                <input type="text" id="topicInput" placeholder="Enter your topic (e.g., 'AI', 'crypto', 'climate change')" 
                       class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400">
            </div>

            <!-- Date Range -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="sinceDate" class="block text-sm font-medium text-gray-700 mb-2">From Date</label>
                    <input type="date" id="sinceDate" 
                           class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400">
                </div>
                <div>
                    <label for="untilDate" class="block text-sm font-medium text-gray-700 mb-2">To Date</label>
                    <input type="date" id="untilDate" 
                           class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400">
                </div>
            </div>

            <!-- Platform Selection -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Platforms</label>
                <div class="flex flex-wrap gap-3">
                    <label class="flex items-center">
                        <input type="checkbox" id="twitterCheck" checked class="mr-2">
                        <span>Twitter/X</span>
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" id="redditCheck" class="mr-2">
                        <span>Reddit</span>
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" id="youtubeCheck" class="mr-2">
                        <span>YouTube</span>
                    </label>
                </div>
            </div>

            <!-- Advanced Options -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div>
                    <label for="maxItems" class="block text-sm font-medium text-gray-700 mb-2">Max Results</label>
                    <select id="maxItems" class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400">
                        <option value="10">10</option>
                        <option value="20" selected>20</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <div>
                    <label for="minLikes" class="block text-sm font-medium text-gray-700 mb-2">Min Likes</label>
                    <input type="number" id="minLikes" placeholder="0" min="0"
                           class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400">
                </div>
                <div>
                    <label for="language" class="block text-sm font-medium text-gray-700 mb-2">Language</label>
                    <select id="language" class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400">
                        <option value="en" selected>English</option>
                        <option value="es">Spanish</option>
                        <option value="fr">French</option>
                        <option value="de">German</option>
                    </select>
                </div>
            </div>

            <!-- Analyze Button -->
            <div class="flex justify-center">
                <button onclick="analyzeTopic()" id="analyzeBtn"
                        class="bg-blue-500 text-white px-8 py-3 rounded-lg hover:bg-blue-600 transition-colors font-semibold">
                    ðŸš€ Start Analysis
                </button>
            </div>
        </div>

        <!-- Loading Indicator -->
        <div id="loadingIndicator" class="hidden">
            <div class="flex items-center justify-center space-x-2 animate-pulse">
                <div class="w-8 h-8 bg-blue-400 rounded-full"></div>
                <div class="w-8 h-8 bg-blue-400 rounded-full"></div>
                <div class="w-8 h-8 bg-blue-400 rounded-full"></div>
            </div>
            <p class="text-center mt-4 text-gray-600">Analyzing social media data...</p>
        </div>

        <!-- AI Suggestions Section -->
        <div id="suggestionsSection" class="bg-white rounded-lg shadow-lg p-6 mb-8 hidden">
            <h2 class="text-2xl font-semibold mb-4">AI Keyword Suggestions</h2>
            <div id="keywordsList" class="flex flex-wrap gap-2">
                <!-- Keywords will be inserted here -->
            </div>
        </div>

        <!-- Results Sections -->
        <div id="resultsContainer" class="grid grid-cols-1 gap-8 hidden">
            <!-- Trending Tweets -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-2xl font-semibold mb-4">Recent Tweets</h2>
                <div id="tweetsList" class="space-y-4">
                    <!-- Tweets will be inserted here -->
                </div>
            </div>

            <!-- Analysis Summary -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-2xl font-semibold mb-4">AI Analysis</h2>
                <div id="summaryContent" class="prose">
                    <!-- Analysis will be inserted here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Set default dates
        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date();
            const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            // Set default dates to recent past (not future!)
            document.getElementById('sinceDate').value = weekAgo.toISOString().split('T')[0];
            document.getElementById('untilDate').value = today.toISOString().split('T')[0];
            
            // Add validation to prevent future dates
            document.getElementById('sinceDate').addEventListener('change', function() {
                const selectedDate = new Date(this.value);
                const today = new Date();
                if (selectedDate > today) {
                    alert('Please select a date in the past, not the future!');
                    this.value = weekAgo.toISOString().split('T')[0];
                }
            });
            
            document.getElementById('untilDate').addEventListener('change', function() {
                const selectedDate = new Date(this.value);
                const today = new Date();
                if (selectedDate > today) {
                    alert('Please select a date in the past, not the future!');
                    this.value = today.toISOString().split('T')[0];
                }
            });
        });

        async function analyzeTopic() {
            const topic = document.getElementById('topicInput').value;
            if (!topic) {
                alert('Please enter a topic');
                return;
            }

            // Collect all form data
            const formData = {
                topic: topic,
                since: document.getElementById('sinceDate').value,
                until: document.getElementById('untilDate').value,
                platforms: {
                    twitter: document.getElementById('twitterCheck').checked,
                    reddit: document.getElementById('redditCheck').checked,
                    youtube: document.getElementById('youtubeCheck').checked
                },
                maxItems: document.getElementById('maxItems').value,
                minLikes: document.getElementById('minLikes').value || undefined,
                language: document.getElementById('language').value
            };

            try {
                // Show loading state
                document.getElementById('loadingIndicator').classList.remove('hidden');
                document.getElementById('analyzeBtn').disabled = true;
                document.getElementById('resultsContainer').classList.add('hidden');
                
                // Start analysis
                const analysisResponse = await fetch('/api/analyze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                const analysisData = await analysisResponse.json();

                // Display keywords (Scweet input structure)
                const keywordsList = document.getElementById('keywordsList');
                const scweetKeywords = analysisData.scweetKeywords;
                if (scweetKeywords && typeof scweetKeywords === 'object') {
                    let html = '';
                    if (Array.isArray(scweetKeywords.words_and)) {
                        html += '<div><span class="font-semibold">words_and:</span> ' + scweetKeywords.words_and.map(keyword => 
                            `<span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full mr-1">${keyword}</span>`
                        ).join('') + '</div>';
                    }
                    if (Array.isArray(scweetKeywords.words_or)) {
                        html += '<div><span class="font-semibold">words_or:</span> ' + scweetKeywords.words_or.map(keyword => 
                            `<span class="bg-green-100 text-green-800 px-3 py-1 rounded-full mr-1">${keyword}</span>`
                        ).join('') + '</div>';
                    }
                    if (Array.isArray(scweetKeywords.hashtag)) {
                        html += '<div><span class="font-semibold">hashtag:</span> ' + scweetKeywords.hashtag.map(keyword => 
                            `<span class="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full mr-1">#${keyword}</span>`
                        ).join('') + '</div>';
                    }
                    keywordsList.innerHTML = html || '<span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full">No keywords available</span>';
                } else {
                    keywordsList.innerHTML = '<span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full">No keywords available</span>';
                }
                document.getElementById('suggestionsSection').classList.remove('hidden');

                // Display tweets (defensive for nulls)
                const tweetsList = document.getElementById('tweetsList');
                if (analysisData.tweets && Array.isArray(analysisData.tweets) && analysisData.tweets.length > 0) {
                    tweetsList.innerHTML = analysisData.tweets.slice(0, 5).map(tweet => {
                        if (!tweet) return '';
                        return `
                            <div class="border-b pb-2">
                                <p class="text-sm">${tweet.text || tweet.full_text || 'No text available'}</p>
                                <div class="text-xs text-gray-600 mt-1">
                                    ${(tweet.user && tweet.user.username) || 'Unknown user'} â€¢ ${tweet.likes || 0} likes
                                </div>
                            </div>
                        `;
                    }).join('');
                } else {
                    tweetsList.innerHTML = '<p class="text-gray-500">No tweets found for this topic.</p>';
                }

                // Display analysis
                const summaryContent = document.getElementById('summaryContent');
                summaryContent.innerHTML = `<p class="text-gray-700">${analysisData.analysis}</p>`;

                // Show results
                document.getElementById('resultsContainer').classList.remove('hidden');
                
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred during analysis: ' + error.message);
            } finally {
                // Hide loading state
                document.getElementById('loadingIndicator').classList.add('hidden');
                document.getElementById('analyzeBtn').disabled = false;
            }
        }

        // Add enter key support for the input field
        document.getElementById('topicInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                analyzeTopic();
            }
        });
    </script>
</body>
</html> 